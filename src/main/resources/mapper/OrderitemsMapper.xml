<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quoll.mapper.OrderitemsMapper">
  <resultMap id="BaseResultMap" type="com.quoll.model.Orderitems">
    <id column="garmentid" jdbcType="INTEGER" property="garmentid" />
    <id column="orderid" jdbcType="INTEGER" property="orderid" />
    <result column="pickupnumber" jdbcType="INTEGER" property="pickupnumber" />
    <result column="packnumber" jdbcType="INTEGER" property="packnumber" />
    <association property="garment" javaType="com.quoll.model.Garment">
      <id column="id" jdbcType="INTEGER" property="id" />
      <result column="shortname" jdbcType="VARCHAR" property="shortname" />
      <result column="companyid" jdbcType="INTEGER" property="companyid" />
      <result column="fullname" jdbcType="VARCHAR" property="fullname" />
    </association>
  </resultMap>
  <select id="selectGarmentItemByOrderID" resultMap="BaseResultMap">
    SELECT o.*, g.* FROM orderitems o LEFT JOIN garment g ON o.garmentid=g.id WHERE o.orderid=#{orderid}
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    garmentid, orderid, pickupnumber, packnumber
  </sql>
  <select id="selectByExample" parameterType="com.quoll.model.OrderitemsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orderitems
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.quoll.model.OrderitemsKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from orderitems
    where garmentid = #{garmentid,jdbcType=INTEGER}
      and orderid = #{orderid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.quoll.model.OrderitemsKey">
    delete from orderitems
    where garmentid = #{garmentid,jdbcType=INTEGER}
      and orderid = #{orderid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.quoll.model.OrderitemsExample">
    delete from orderitems
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.quoll.model.Orderitems">
    insert into orderitems (garmentid, orderid, pickupnumber, packnumber
      )
    values (#{garmentid,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, #{pickupnumber,jdbcType=INTEGER}, #{packnumber,jdbcType=INTEGER}
      )
      ON DUPLICATE KEY UPDATE
      pickupnumber = #{pickupnumber,jdbcType=INTEGER},
      packnumber = #{packnumber,jdbcType=INTEGER}
  </insert>
  <insert id="insertSelective" parameterType="com.quoll.model.Orderitems">
    insert into orderitems
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="garmentid != null">
        garmentid,
      </if>
      <if test="orderid != null">
        orderid,
      </if>
      <if test="pickupnumber != null">
        pickupnumber,
      </if>
      <if test="packnumber != null">
        packnumber,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="garmentid != null">
        #{garmentid,jdbcType=INTEGER},
      </if>
      <if test="orderid != null">
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="pickupnumber != null">
        #{pickupnumber,jdbcType=INTEGER},
      </if>
      <if test="packnumber != null">
        #{packnumber,jdbcType=INTEGER},
      </if>
    </trim>
    ON DUPLICATE KEY UPDATE
    <trim suffixOverrides=",">
      <if test="pickupnumber != null">
        pickupnumber = #{pickupnumber,jdbcType=INTEGER},
      </if>
      <if test="packnumber != null">
         packnumber = #{packnumber,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.quoll.model.OrderitemsExample" resultType="java.lang.Long">
    select count(*) from orderitems
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update orderitems
    <set>
      <if test="record.garmentid != null">
        garmentid = #{record.garmentid,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null">
        orderid = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.pickupnumber != null">
        pickupnumber = #{record.pickupnumber,jdbcType=INTEGER},
      </if>
      <if test="record.packnumber != null">
        packnumber = #{record.packnumber,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update orderitems
    set garmentid = #{record.garmentid,jdbcType=INTEGER},
      orderid = #{record.orderid,jdbcType=INTEGER},
      pickupnumber = #{record.pickupnumber,jdbcType=INTEGER},
      packnumber = #{record.packnumber,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.quoll.model.Orderitems">
    update orderitems
    <set>
      <if test="pickupnumber != null">
        pickupnumber = #{pickupnumber,jdbcType=INTEGER},
      </if>
      <if test="packnumber != null">
        packnumber = #{packnumber,jdbcType=INTEGER},
      </if>
    </set>
    where garmentid = #{garmentid,jdbcType=INTEGER}
      and orderid = #{orderid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quoll.model.Orderitems">
    update orderitems
    set pickupnumber = #{pickupnumber,jdbcType=INTEGER},
      packnumber = #{packnumber,jdbcType=INTEGER}
    where garmentid = #{garmentid,jdbcType=INTEGER}
      and orderid = #{orderid,jdbcType=INTEGER}
  </update>
</mapper>